module.exports=__NEXT_REGISTER_PAGE("/docs/features/path-aliases",function(){var e=webpackJsonp([50],{383:function(e,a,t){e.exports=t(384)},384:function(e,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:true});var n=t(0);var l=t.n(n);var o=t(3);var r=t.n(o);var i=t(6);var s=t(7);var u=t(10);var m=t(1);var c=t(14);a["default"]=Object(i["b"])({title:"Simplifying Microservices with Path Alias",date:"15 Mar 2017",authors:[s["e"],s["d"]],editUrl:"pages/docs/features/path-aliases.js"})(r()(i["a"],function(e){return l.a.createElement("div",{className:"_markdown_"},l.a.createElement(e.p,null,"With the microservices architecture, we break down the whole app into multiple independent programs: microservices. This architecture gives us a lot of benefits including:"),l.a.createElement(e.ul,null,l.a.createElement(e.li,null,l.a.createElement(e.strong,null,"Parallelize")," workload by distributing ownership and responsibility across different teams."),l.a.createElement(e.li,null,l.a.createElement(e.strong,null,"Mix up")," different languages, frameworks and even varied versions of those."),l.a.createElement(e.li,null,l.a.createElement(e.strong,null,"Scale")," easily by adding more resources to independent microservices as needed.")),l.a.createElement(e.p,null,"With this architecture, now we have to deal with a lot of microservices. However, exposing them to the public is not a good idea. If we can hide these microservices under a single domain name, that will give us better results."),l.a.createElement(e.p,null,"For example, let's say our app has two microservices as shown below:"),l.a.createElement(e.p,null,l.a.createElement(m["a"],null,"- ui.our-domain.com\n- api.our-domain.com\n")),l.a.createElement(e.p,null,"As it is not a good idea to expose these urls to the public, we can map these services into our main domain like this:"),l.a.createElement(e.p,null,l.a.createElement(m["a"],null,"- our-domain.com/api/** -> api.our-domain.com\n- our-domain.com/** -> ui.our-domain.com\n")),l.a.createElement(e.p,null,"As our app evolves, we need to split the ",l.a.createElement(e.code,null,"ui")," microservice into two: ",l.a.createElement(e.code,null,"frontend")," and ",l.a.createElement(e.code,null,"admin"),". We also need to add a new microservice for ",l.a.createElement(e.code,null,"/api/register")," to handle the increasing load."),l.a.createElement(e.p,null,"We can do a new mapping like this:"),l.a.createElement(e.p,null,l.a.createElement(m["a"],null,"- our-domain.com/api/register -> api-register.our-domain.com\n- our-domain.com/api/** -> api.our-domain.com\n- our-domain.com/admin/** -> admin.our-domain.com\n- our-domain.com/** -> frontend.our-domain.com\n")),l.a.createElement(e.p,null,"After this, we will have whole new microservices set up. However, our end users do not need to know about these changes."),l.a.createElement(e.blockquote,null,l.a.createElement(e.p,null,"Hence, with this setup we can manage the architecture of our microservices and change them at will without downtime or having to notify users.")),l.a.createElement(e.h2,null,"Path Alias"),l.a.createElement(e.p,null,"If you ",l.a.createElement(e.a,{href:"/docs/getting-started/assign-a-domain-name#2.-using-a-custom-domain,-managed-by-now"},"manage")," your domain inside ZEIT or ",l.a.createElement(e.a,{href:"/docs/getting-started/assign-a-domain-name#4.-using-a-custom-domain-with-a-cname"},"point it")," to ",l.a.createElement(e.code,null,"alias.zeit.co"),', you can hide microservices under a domain as shown above with our "Path Alias" feature.'),l.a.createElement(e.p,null,"Here's how to do it."),l.a.createElement(e.p,null,"Create a file called ",l.a.createElement(e.code,null,"rules.json")," and add the following content:"),l.a.createElement(e.p,null,l.a.createElement(m["a"],null,'{\n  "rules": [\n    { "pathname": "/api/register", "method": ["POST"], "dest": "api-register-wcepelgodl.now.sh" },\n    { "pathname": "/api/**", "method": ["GET", "POST"], "dest": "api-tuhpdtgoja.now.sh" },\n    { "dest": "ui-dbuyejqwio.now.sh" }\n  ]\n}\n')),l.a.createElement(e.p,null,"Then run the following command:"),l.a.createElement(e.p,null,l.a.createElement(c["a"],null,"now alias our-domain.com -r rules.json")),l.a.createElement(e.p,null,"Every time you run the above command, the rules for ",l.a.createElement(e.code,null,"our-domain.com")," will be updated without any downtime."),l.a.createElement(e.h2,null,"API"),l.a.createElement(e.p,null,"As you have seen in the above example, you can define a set of rules. These rules are executed ",l.a.createElement(e.strong,null,"in order"),". An incoming HTTP request will be sent to the destination mentioned in the first matching rule."),l.a.createElement(e.p,null,"A rule should contain the ",l.a.createElement(e.code,null,"dest")," field and one or many optional fields including ",l.a.createElement(e.code,null,"pathname")," and ",l.a.createElement(e.code,null,"method"),". Here's a detailed definition of each of these fields."),l.a.createElement(e.h4,null,"dest"),l.a.createElement(e.p,null,"The destination of each rule should be one of the following:"),l.a.createElement(e.ul,null,l.a.createElement(e.li,null,"The unique now deployment url like ",l.a.createElement(e.code,null,"mysite-wcepelgodl.now.sh")),l.a.createElement(e.li,null,"An alias like ",l.a.createElement(e.code,null,"our-app-ui.now.sh")),l.a.createElement(e.li,null,"An external hostname that may not point to a ",l.a.createElement(e.code,null,"now.sh")," deployment.")),l.a.createElement(e.blockquote,null,l.a.createElement(e.p,null,"You can get the original hostname from the ",l.a.createElement(e.code,null,"x-forwarded-host")," header.")),l.a.createElement(e.h3,null,"pathname (optional)"),l.a.createElement(e.p,null,"Incoming HTTP requests will be matched with the pathname format defined in the rule. The ",l.a.createElement(e.code,null,"pathname")," field could have one of the following formats:"),l.a.createElement(e.ul,null,l.a.createElement(e.li,null,l.a.createElement(e.strong,null,"/api/register")," - A strict path match"),l.a.createElement(e.li,null,l.a.createElement(e.strong,null,"/user/*/profile")," - A wildcard rule matches pathnames like ",l.a.createElement(e.code,null,"/user/rauchg/profile")),l.a.createElement(e.li,null,l.a.createElement(e.strong,null,"/api/"),"** - A wildcard rule matches pathnames with multiple segments like ",l.a.createElement(e.code,null,"/api/user/email")," or ",l.a.createElement(e.code,null,"/api/login"))),l.a.createElement(e.p,null,"If there is no ",l.a.createElement(e.code,null,"pathname")," field, all the requests will be a candidate for the rule (it is similar to having ",l.a.createElement(e.code,null,"/**")," as the value for ",l.a.createElement(e.code,null,"pathname"),")."),l.a.createElement(e.p,null,"Additionally the pathname will be forwarded to the destination as is. Here are some examples:"),l.a.createElement(e.p,null,l.a.createElement(m["a"],null,"- /api/register -> my-api-register.now.sh/api/register\n- /user/rauchg/profile -> my-ui.now.sh/user/rauchg/profile\n- /api/v2/user/info -> my-api.now.sh/api/v2/user/info\n")),l.a.createElement(e.h3,null,"methods (optional)"),l.a.createElement(e.p,null,"This is a list of HTTP method types that the rule supports. It can have one or many methods like this:"),l.a.createElement(e.p,null,l.a.createElement(m["a"],null,'{ "pathname": "/api/**", "method": ["GET", "POST"], "dest": "api-tuhpdtgoja.now.sh" }\n')),l.a.createElement(e.p,null,"If there is no ",l.a.createElement(e.code,null,"methods")," field, requests with any HTTP method will be a candidate for the rule."),l.a.createElement(e.h2,null,"Managing Rules"),l.a.createElement(e.p,null,"Have a look at the rules we have introduced previously:"),l.a.createElement(e.p,null,l.a.createElement(m["a"],null,'{\n  "rules": [\n    { "pathname": "/api/register", "method": ["POST"], "dest": "api-register-wcepelgodl.now.sh" },\n    { "pathname": "/api/**", "method": ["GET", "POST"], "dest": "api-tuhpdtgoja.now.sh" },\n    { "dest": "ui-dbuyejqwio.now.sh" }\n  ]\n}\n')),l.a.createElement(e.p,null,"Destinations of these rules are unique ",l.a.createElement(u["a"],{color:"#000"})," deployment urls. They will be changed every time you deploy a new version. Therefore, you need to update the rules again and again."),l.a.createElement(e.p,null,"It works, but there is a better way to do this."),l.a.createElement(e.p,null,"Have a look at the following set of rules."),l.a.createElement(e.p,null,l.a.createElement(m["a"],null,'{\n  "rules": [\n    { "pathname": "/api/register", "method": ["POST"], "dest": "my-api-register.now.sh" },\n    { "pathname": "/api/**", "method": ["GET", "POST"], "dest": "my-api.now.sh" },\n    { "dest": "my-ui.now.sh" }\n  ]\n}\n')),l.a.createElement(e.p,null,"Now for the ",l.a.createElement(e.code,null,"dest")," field, instead of the deployment url (",l.a.createElement(e.code,null,"api-tuhpdtgoja.now.sh"),"), we now have an alias (",l.a.createElement(e.code,null,"my-api.now.sh"),")."),l.a.createElement(e.p,null,"Then we only need to set these rules once, unless you change the microservices setup."),l.a.createElement(e.p,null,"With this setup, let's say you've deployed a new version of the \"api microservice\" and its deployment url is ",l.a.createElement(e.code,null,"api-iewodtfalq.now.sh"),"."),l.a.createElement(e.p,null,"Now simply map it to the alias like this:"),l.a.createElement(e.p,null,l.a.createElement(c["a"],null,"now alias api-iewodtfalq.now.sh my-api.now.sh")),l.a.createElement(e.p,null,"You don't need to update path alias rules since ",l.a.createElement(e.code,null,"my-api.now.sh")," points to the latest deployment."))}))}},[383]);return{page:e.default}});